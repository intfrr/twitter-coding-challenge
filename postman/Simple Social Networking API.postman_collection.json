{
	"info": {
		"_postman_id": "4c5b29b8-c341-44c3-a667-1a6abed13044",
		"name": "Simple Social Networking API",
		"description": "Spring Boot implementation of recruitment task\n\nContact Support:\n Name: Jakub Ziółkowski\n Email: jakub.ziolkowski@hotmail.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Example requests",
			"item": [
				{
					"name": "Makes User to follow another User. Response contains list of all followed Users",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:login/follow/:another",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"follow",
								":another"
							],
							"variable": [
								{
									"key": "another",
									"value": "<string>",
									"description": "(Required) Login of Twitter User to be followed"
								},
								{
									"key": "login",
									"value": "<string>",
									"description": "(Required) Login of Twitter User"
								}
							]
						}
					},
					"response": [
						{
							"name": "There was a problem following another User - please follow exception status for details",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/:login/follow/:another",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":login",
										"follow",
										":another"
									],
									"variable": [
										{
											"key": "login"
										},
										{
											"key": "another"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Successfully followed new User",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/:login/follow/:another",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":login",
										"follow",
										":another"
									],
									"variable": [
										{
											"key": "login"
										},
										{
											"key": "another"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"login\": \"sint anim\"\n },\n {\n  \"login\": \"officia eu\"\n }\n]"
						}
					]
				},
				{
					"name": "List of all followed Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:login/following",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"following"
							],
							"variable": [
								{
									"key": "login",
									"value": "<string>",
									"description": "(Required) Login of Twitter User"
								}
							]
						}
					},
					"response": [
						{
							"name": "There was a problem returning the User's following list - please follow exception status for details",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/:login/following",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":login",
										"following"
									],
									"variable": [
										{
											"key": "login"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The User's followed list was successfully returned",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/:login/following",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":login",
										"following"
									],
									"variable": [
										{
											"key": "login"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"login\": \"sint anim\"\n },\n {\n  \"login\": \"officia eu\"\n }\n]"
						}
					]
				},
				{
					"name": "List Tweets posted by all the Users which User follow in reverse chronological order",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:login/timeline",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"timeline"
							],
							"variable": [
								{
									"key": "login",
									"value": "<string>",
									"description": "(Required) Login of Twitter User"
								}
							]
						}
					},
					"response": [
						{
							"name": "There was a problem returning the User's Timeline - please follow exception status for details",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/:login/timeline",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":login",
										"timeline"
									],
									"variable": [
										{
											"key": "login"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The Tweet list posted by all the Users which User follow was successfully returned",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/:login/timeline",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":login",
										"timeline"
									],
									"variable": [
										{
											"key": "login"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"created\": \"tempor\",\n  \"id\": \"enim dolor dolore dolore\",\n  \"message\": \"qui in\",\n  \"user\": {\n   \"login\": \"laboris voluptate\"\n  }\n },\n {\n  \"created\": \"ullamco cillum dolore\",\n  \"id\": \"dolore\",\n  \"message\": \"in id\",\n  \"user\": {\n   \"login\": \"officia fugiat dolore\"\n  }\n }\n]"
						}
					]
				},
				{
					"name": "Creates a new Tweet on behalf of the User.",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:login/tweet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"tweet"
							],
							"variable": [
								{
									"key": "login",
									"value": "<string>",
									"description": "(Required) Login of Twitter User"
								}
							]
						},
						"description": "If the User with the given login does not exist, it will be automatically created"
					},
					"response": [
						{
							"name": "There was a problem creating a Tweet - please follow exception status for details",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"message\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/:login/tweet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":login",
										"tweet"
									],
									"variable": [
										{
											"key": "login"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Successfully created new Tweet",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"message\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/:login/tweet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":login",
										"tweet"
									],
									"variable": [
										{
											"key": "login"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"created\": \"aliqua consequat non adipisicing\",\n \"id\": \"sint commodo anim cillum\",\n \"message\": \"cupidatat occaecat ipsum\",\n \"user\": {\n  \"login\": \"Ut occaecat\"\n }\n}"
						}
					]
				},
				{
					"name": "List Tweets of particular User in reverse chronological order",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:login/wall",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"wall"
							],
							"variable": [
								{
									"key": "login",
									"value": "<string>",
									"description": "(Required) Login of Twitter User"
								}
							]
						}
					},
					"response": [
						{
							"name": "There was a problem returning the User's Tweet list - please follow exception status for details",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/:login/wall",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":login",
										"wall"
									],
									"variable": [
										{
											"key": "login"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The User's Tweet list was successfully returned",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/:login/wall",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":login",
										"wall"
									],
									"variable": [
										{
											"key": "login"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"created\": \"tempor\",\n  \"id\": \"enim dolor dolore dolore\",\n  \"message\": \"qui in\",\n  \"user\": {\n   \"login\": \"laboris voluptate\"\n  }\n },\n {\n  \"created\": \"ullamco cillum dolore\",\n  \"id\": \"dolore\",\n  \"message\": \"in id\",\n  \"user\": {\n   \"login\": \"officia fugiat dolore\"\n  }\n }\n]"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Integration tests",
			"item": [
				{
					"name": "User TESTER creates first Tweet successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db575c45-0ded-4da5-834f-60e0c4cd3ef8",
								"exec": [
									"pm.test(\"Response must be 201 CREATED\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(201);",
									"});",
									"",
									"pm.test(\"Response TweetDTO must have valid id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"});",
									"",
									"pm.test(\"Response TweetDTO must have valid user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.login).to.be.eq(\"TESTER\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:login/tweet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"tweet"
							],
							"variable": [
								{
									"key": "login",
									"value": "TESTER",
									"description": "(Required) Login of Twitter User"
								}
							]
						},
						"description": "If the User with the given login does not exist, it will be automatically created"
					},
					"response": []
				},
				{
					"name": "User DEVELOPER creates first Tweet successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc168da3-24ce-43eb-9c49-132b2959c60d",
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});",
									"",
									"pm.test(\"Response TweetDTO have valid id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"});",
									"",
									"pm.test(\"Response TweetDTO have valid user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.login).to.be.eq(\"DEVELOPER\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": \"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:login/tweet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"tweet"
							],
							"variable": [
								{
									"key": "login",
									"value": "DEVELOPER",
									"description": "(Required) Login of Twitter User"
								}
							]
						},
						"description": "If the User with the given login does not exist, it will be automatically created"
					},
					"response": []
				},
				{
					"name": "User TESTER cant add over 140 characters Tweet",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cfdc432b-adb9-4e87-bff5-11c84bb9c5ec",
								"exec": [
									"pm.test(\"Response must be 400 BAD_REQUEST\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(400);",
									"});",
									"",
									"pm.test(\"Response must have error property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:login/tweet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"tweet"
							],
							"variable": [
								{
									"description": "(Required) Login of Twitter User",
									"key": "login",
									"value": "TESTER"
								}
							]
						},
						"description": "If the User with the given login does not exist, it will be automatically created"
					},
					"response": []
				},
				{
					"name": "User DEVELOPER creates second Tweet successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c932aa59-ed55-4214-b6aa-54b78d87f5ab",
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});",
									"",
									"pm.test(\"Response TweetDTO have valid id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"});",
									"",
									"pm.test(\"Response TweetDTO have valid user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.login).to.be.eq(\"DEVELOPER\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": \"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:login/tweet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"tweet"
							],
							"variable": [
								{
									"key": "login",
									"value": "DEVELOPER",
									"description": "(Required) Login of Twitter User"
								}
							]
						},
						"description": "If the User with the given login does not exist, it will be automatically created"
					},
					"response": []
				},
				{
					"name": "User ADMIN creates first Tweet successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39561eeb-112a-49f2-9472-04dd0be00ef8",
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});",
									"",
									"pm.test(\"Response TweetDTO have valid id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"});",
									"",
									"pm.test(\"Response TweetDTO have valid user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.login).to.be.eq(\"ADMIN\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": \"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:login/tweet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"tweet"
							],
							"variable": [
								{
									"description": "(Required) Login of Twitter User",
									"key": "login",
									"value": "ADMIN"
								}
							]
						},
						"description": "If the User with the given login does not exist, it will be automatically created"
					},
					"response": []
				},
				{
					"name": "User DEVELOPER gets his wall successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d338acf2-113b-48f9-9857-a4ce93757f28",
								"exec": [
									"pm.test(\"Response must be 200 OK\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"",
									"pm.test(\"Response must be an array and have 2 elements\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\").with.lengthOf(2);",
									"});",
									"",
									"pm.test(\"Response must be reverse ordered by creation date\", function () {",
									"    var jsonData = pm.response.json();",
									"    const dates = jsonData.map(item => Date.parse(item.created));",
									"    function isDecreasing(a) {",
									"        return a.every((x, i) => {",
									"           return i === 0 || x <= a[i-1];",
									"        });",
									"    }",
									"    pm.expect(isDecreasing(dates)).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/:login/wall",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"wall"
							],
							"variable": [
								{
									"description": "(Required) Login of Twitter User",
									"key": "login",
									"value": "DEVELOPER"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User TESTER follows DEVELOPER",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31f0b9ea-8c25-45c5-a3a6-2efa337e18fd",
								"exec": [
									"pm.test(\"Response must be 200 OK\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"",
									"pm.test(\"Response must be an array and have 1 element\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\").with.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/:login/follow/:another",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"follow",
								":another"
							],
							"variable": [
								{
									"description": "(Required) Login of Twitter User",
									"key": "login",
									"value": "TESTER"
								},
								{
									"key": "another",
									"value": "DEVELOPER",
									"description": "(Required) Login of Twitter User to be followed"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User TESTER follows ADMIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "906e24e8-5756-4418-812d-310444bb7798",
								"exec": [
									"pm.test(\"Response must be 200 OK\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"",
									"pm.test(\"Response must be an array and have 2 elements\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\").with.lengthOf(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/:login/follow/:another",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"follow",
								":another"
							],
							"variable": [
								{
									"description": "(Required) Login of Twitter User",
									"key": "login",
									"value": "TESTER"
								},
								{
									"key": "another",
									"value": "ADMIN",
									"description": "(Required) Login of Twitter User to be followed"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User DEVELOPER follows ADMIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6bfdd5ca-659e-4e76-97b2-1c2403448290",
								"exec": [
									"pm.test(\"Response must be 200 OK\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"",
									"pm.test(\"Response must be an array and have 1 element\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\").with.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/:login/follow/:another",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"follow",
								":another"
							],
							"variable": [
								{
									"description": "(Required) Login of Twitter User",
									"key": "login",
									"value": "DEVELOPER"
								},
								{
									"key": "another",
									"value": "ADMIN",
									"description": "(Required) Login of Twitter User to be followed"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User DEVELOPER cant follow himself",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34232949-5bfd-49b4-a6d1-aa3b82a82719",
								"exec": [
									"pm.test(\"Response must be 400 BAD_REQUEST\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(400);",
									"});",
									"",
									"pm.test(\"Response must have error property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/:login/follow/:another",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"follow",
								":another"
							],
							"variable": [
								{
									"description": "(Required) Login of Twitter User",
									"key": "login",
									"value": "DEVELOPER"
								},
								{
									"key": "another",
									"value": "DEVELOPER",
									"description": "(Required) Login of Twitter User to be followed"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of users that TESTER following",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dab80c6c-0f07-4eff-8254-b23ad5efa7f8",
								"exec": [
									"pm.test(\"Response must be 200 OK\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"",
									"pm.test(\"Response must be an array and have 2 elements\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\").with.lengthOf(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/:login/following",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"following"
							],
							"variable": [
								{
									"description": "(Required) Login of Twitter User",
									"key": "login",
									"value": "TESTER"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of users that DEVELOPER following",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29c599f7-863c-49e8-9e94-7dee8463dd2c",
								"exec": [
									"pm.test(\"Response must be 200 OK\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"",
									"pm.test(\"Response must be an array and have 1 elements\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\").with.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/:login/following",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"following"
							],
							"variable": [
								{
									"description": "(Required) Login of Twitter User",
									"key": "login",
									"value": "DEVELOPER"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of users that ADMIN following",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a30e62fd-675b-457e-8bef-a19443ec90af",
								"exec": [
									"pm.test(\"Response must be 200 OK\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"",
									"pm.test(\"Response must be an array and have 0 elements\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\").with.lengthOf(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/:login/following",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"following"
							],
							"variable": [
								{
									"description": "(Required) Login of Twitter User",
									"key": "login",
									"value": "ADMIN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get TESTER timeline",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c206684f-a300-4263-83e0-ba1068336618",
								"exec": [
									"pm.test(\"Response must be 200 OK\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"",
									"pm.test(\"Response must be an array and have 3 elements\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\").with.lengthOf(3);",
									"});",
									"",
									"pm.test(\"Response must be reverse ordered by creation date\", function () {",
									"    var jsonData = pm.response.json();",
									"    const dates = jsonData.map(item => Date.parse(item.created));",
									"    function isDecreasing(a) {",
									"        return a.every((x, i) => {",
									"           return i === 0 || x <= a[i-1];",
									"        });",
									"    }",
									"    pm.expect(isDecreasing(dates)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/:login/timeline",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"timeline"
							],
							"variable": [
								{
									"description": "(Required) Login of Twitter User",
									"key": "login",
									"value": "TESTER"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get DEVELOPER timeline",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9e822ec-e0f3-4d20-b04f-e6f639ffb9a9",
								"exec": [
									"pm.test(\"Response must be 200 OK\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"",
									"pm.test(\"Response must be an array and have 1 element\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\").with.lengthOf(1);",
									"});",
									"",
									"pm.test(\"Response must be reverse ordered by creation date\", function () {",
									"    var jsonData = pm.response.json();",
									"    const dates = jsonData.map(item => Date.parse(item.created));",
									"    function isDecreasing(a) {",
									"        return a.every((x, i) => {",
									"           return i === 0 || x <= a[i-1];",
									"        });",
									"    }",
									"    pm.expect(isDecreasing(dates)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/:login/timeline",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":login",
								"timeline"
							],
							"variable": [
								{
									"description": "(Required) Login of Twitter User",
									"key": "login",
									"value": "DEVELOPER"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "74cb9a46-ccd6-48e7-8583-11df471fbcc4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4cd80715-b732-4061-a08d-5a3a045cc5d5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "7b73e8ad-6a69-41dc-9093-16b8a35892c1",
			"key": "baseUrl",
			"value": "localhost:8080"
		}
	],
	"protocolProfileBehavior": {}
}